// server.js
const express = require('express');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');
const bcrypt = require('bcrypt');

const app = express();
const port = 3000;

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// SQLite Database
const db = new sqlite3.Database('database.sqlite', (err) => {
  if (err) {
    console.error(err.message);
  }
  console.log('Connected to SQLite database.');
});

// Create tables if not exist
db.run(`CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT NOT NULL UNIQUE,
  password TEXT NOT NULL
)`);
db.run(`CREATE TABLE IF NOT EXISTS records (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  firstName TEXT,
  lastName TEXT,
  birthDate TEXT
)`);

// Routes
app.get('/', (req, res) => {
  res.redirect('/register');
});

app.get('/register', (req, res) => {
  res.sendFile(path.join(__dirname, 'views', 'register.html'));
});

app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  db.run('INSERT INTO users (username, password) VALUES (?, ?)', [username, hashedPassword], (err) => {
    if (err) {
      res.send('Registration failed. Username might already exist.');
    } else {
      res.send('<h1>Registration successful!</h1><a href="/login">Go to Login</a>');
    }
  });
});

app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, 'views', 'login.html'));
});

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  db.get('SELECT * FROM users WHERE username = ?', [username], async (err, user) => {
    if (err) {
      console.error(err);
      return res.send('Login failed. An error occurred.');
    }
    if (user && await bcrypt.compare(password, user.password)) {
      res.redirect(`/admin?username=${username}`);
    } else {
      res.send('Login failed. Invalid username or password.');
    }
  });
});

app.get('/admin', (req, res) => {
  const username = req.query.username;
  if (!username) {
    return res.redirect('/login');
  }

  db.all('SELECT * FROM records', [], (err, records) => {
    if (err) {
      console.error(err);
      res.send('Error fetching records.');
    } else {
      const recordsTable = records.map(record => `
        <tr>
          <td>${record.firstName}</td>
          <td>${record.lastName}</td>
          <td>${record.birthDate}</td>
        </tr>`).join('');

      fs.readFile(path.join(__dirname, 'views', 'admin.html'), 'utf8', (err, data) => {
        if (err) {
          console.error(err);
          res.send('Error loading admin page.');
        } else {
          const page = data
            .replace(/{{username}}/g, username)
            .replace('{{records}}', recordsTable);
          res.send(page);
        }
      });
    }
  });
});

app.post('/admin', (req, res) => {
  const { firstName, lastName, birthDate, username } = req.body;
  db.run('INSERT INTO records (firstName, lastName, birthDate) VALUES (?, ?, ?)', [firstName, lastName, birthDate], (err) => {
    if (err) {
      console.error(err);
      res.send('Error adding record.');
    } else {
      res.redirect(`/admin?username=${username}`);
    }
  });
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
